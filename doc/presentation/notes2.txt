distributing methods

	central authority
		slow failure prone inefficient
	p2p
		all nodes equal
		failure inconsequential
		
		
so I built lib
	
	tentatively
	libDHT
	
	c lib

scalability needs
	handle many messages
		organise network
		handle outside requests
	with minimal impact
	so node can do its job
	
	
	for this non-blocking async io
		blocking io - useless for handling simulatneous connections
		thread/process pre req has overhead
	
	other aspect
	many nodes and organising them
	
so assign nodes ID (hash of w/e)
	ids processed numerically
	
	form a 'ring'
	
	map work to node by using a key hash
	go around ring until the closest node to that id
	large number of nodes = large number of hops = inefficient
	
	so
	finger table
		finger[n] = successor(id + n^2)
		
	stab
		accounts for changes in node set
		check succs
		check pred
		update fingers
	
	dealing with joins and failures
	join
		find succ like normal
		notify succ
		pred asks succ for it's pred
		changed
		pred updates succ notifies new node
		done
	leave
		node leaves
		stabilise notices dead node
		removes its entry
		moves on to next succ
	
interface
	setup
	join/create network
	map id to node
	
	net:
	open connections for data
	
system has wide ranging uses
	
	memcached
		caching database etc results over many servers with a little spare resources
		consistent hashing
		
	publish subscribe
	
	distributed storage
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	